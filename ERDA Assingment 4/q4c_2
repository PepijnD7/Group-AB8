import numpy as np

class NeuralNetwork:
    def __init__(self):
        self.wij = np.random.rand(10, 10)  # input to hidden layer weights
        self.wjk = np.random.rand(10, 1)  # hidden layer to output

    def sigmoid(self, x, w):
        z = np.dot(x, w)
        return 1 / (1 + np.exp(-z))

    def sigmoid_derivative(self, x, w):
        return self.sigmoid(x, w) * (1 - self.sigmoid(x, w))


    def gradient_descent(self,x,y,iterations):
        etha = 0.001

        for i in range(iterations):
            Xi = x
            Xj = self.sigmoid(Xi, self.wij)
            yhat = self.sigmoid(Xj, self.wjk)

            # gradients for hidden to output weights
            g_wjk = np.dot(Xj.T, (y - yhat) * self.sigmoid_derivative(Xj, self.wjk))
            # gradients for input to hidden weights
            #print(g_wjk)
            print(self.sigmoid_derivative(Xi, self.wij))
            #print((y - yhat) * self.sigmoid_derivative(Xj, self.wjk))
            g_wij = np.dot(Xi.T, np.dot((y - yhat) * self.sigmoid_derivative(Xj, self.wjk),self.wjk.T) * self.sigmoid_derivative(Xi, self.wij))

            # update weights
            self.wij += etha*g_wij
            self.wjk += etha*g_wjk




if __name__ == '__main__':
    neural_network = NeuralNetwork()
    print('Random starting input to hidden weights: ')
    print(neural_network.wij)
    print('Random starting hidden to output weights: ')
    print(neural_network.wjk)
    X = np.array([[268., 60.30, 58.37, 17.40, 880., 8800., 233000., 180000., 168000., 7.],
                           [292., 60.3, 63.69, 16.8, 880., 8200., 233000., 182000., 173000., 8.],
                           [142., 35.8, 33.62, 12.6, 850., 3500., 65317., 58604., 37648., 3.],
                           [188., 35.8, 42.12, 12.6, 850., 4300., 76900., 66361., 42493., 3.],
                           [408., 64.44, 70.67, 19.4, 920., 11500., 390100., 295743., 184567., 9.],
                           [320., 60.9, 63.8, 18.5, 900., 11800., 297500., 201800., 134800., 5.],
                           [408., 64.8, 73.86, 18.5, 920., 12000., 351543., 237680., 159570., 7.],
                           [294., 60.1, 68.3, 17.02, 903., 12000., 254100., 202000., 118000., 8.],
                           [344., 60.1, 68.3, 17.02, 903., 12000., 254100., 202000., 118000., 8.],
                           [88., 26., 31.68, 9.86, 850., 3300., 36500., 34000., 21810., 2.]])

    y = np.array([[0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]]).T
    neural_network.gradient_descent(X, y, 100000)
