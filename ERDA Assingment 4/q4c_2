import numpy as np

class NeuralNetwork:
    def __init__(self):
        self.wij = np.random.rand(10, 10)/10000  # input to hidden layer weights
        self.wjk = np.random.rand(10, 1)/10000  # hidden layer to output

    def sigmoid(self,z):

        return 1 / (1 + np.exp(-z))

    def sigmoid_derivative(self, z):
        return self.sigmoid(z) * (1 - self.sigmoid(z))


    def gradient_descent(self,x,y,iterations):
        etha = 0.000000001

        for i in range(iterations):
            Xi = x
            zj =  np.dot(Xi, self.wij)
            Xj = self.sigmoid(zj)
            zk = np.dot(Xj, self.wjk)
            yhat = self.sigmoid(zk)
            # gradients for hidden to output weights
            deltak = (y-yhat)* self.sigmoid_derivative(zk)
            g_wjk = np.dot(Xj.T, (y - yhat)) * self.sigmoid_derivative(zk)


            # gradients for input to hidden weights
            deltaj = np.dot(deltak,self.wjk.T)
            g_wij = self.sigmoid_derivative(zj)*np.dot(deltaj,Xi)

            # update weights
            self.wij += etha*g_wij
            self.wjk += etha*g_wjk


        print("Thei weights are:")
        print(self.wij)
        print(self.wjk)
        print("The prediction is")
        print(yhat)
        #print("difference")
        #print(y - yhat)




if __name__ == '__main__':
    neural_network = NeuralNetwork()
    print('Random starting input to hidden weights: ')
    print(neural_network.wij)
    print('Random starting hidden to output weights: ')
    print(neural_network.wjk)
    X = np.transpose(np.array([[320, 60.9, 63.8, 18.5, 900, 11800, 297500, 201800, 134800, 5],
                                [294, 60.1, 62.8, 16.3, 920, 11500, 252650, 192776, 110677, 6],
                                [344, 60.1, 68.3, 17.02, 903, 12000, 254100, 202000, 118000, 8],
                                [268, 60.30, 58.37, 17.40, 880, 8800, 233000, 180000, 168000, 7],
                                [292, 60.3, 63.69, 16.8, 880, 8200, 233000, 182000, 173000, 8],
                                [408, 64.8, 73.86, 18.5, 920, 12000, 351543, 237680, 159570, 7],
                                [408, 64.44, 70.67, 19.4, 920, 11500, 390100, 295743, 184567, 9],
                                [142, 35.8, 33.62, 12.6, 850, 3500, 65317, 58604, 37648, 3],
                                [188, 35.8, 42.12, 12.6, 850, 4300, 76900, 66361, 42493, 3],
                                [88, 26, 31.68, 9.86, 850, 3300, 36500, 34000, 21810, 2]]))
    y = np.array([[0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]]).T
    neural_network.gradient_descent(X, y, 2)
